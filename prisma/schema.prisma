generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?       @map("email_verified")
  role          Role            @default(user)
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  CartItem  CartItem[]
  Order     Order[]

  @@map("users")
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Frame {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String      @unique
  image       String
  borderSrc   String
  borderWidth Float
  unit_price  Float
  category    Category
  color       Color
  collection  Collection
  CartItem    CartItem[]
  OrderItem   OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum Category {
  Frame_SingleMat
  Frame_DoubleMats
  PictureFrames
  Collages_SingleMat
  Collages_DoubleMats
  DiplomasFrames
}

enum Color {
  Aqua
  Barnwood
  Black
  BlondeBurl
  Brown
  Bronze
  Burgundy
  Charcoal
  ClearStain
  Cherry
  Gold
  Coffee
  Green
  Grey
  Honey
}

enum Collection {
  NaturalWoodCollection
  CloaseoutPicturesFrames
}

enum Mirror {
  A
  B
  C
  D
}

enum MessageStatus {
  UnResolved
  Resolved
}

model Message {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  message   String
  name      String
  email     String
  userId    String?       @db.ObjectId
  status    MessageStatus @default(UnResolved)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

enum Glazing {
  A
  B
  C
  D
}

enum Printing {
  A
  B
  C
  D
}

enum Backing {
  A
  B
  C
  D
}

enum Stretching {
  A
  B
  C
  D
}

enum Sides {
  A
  B
  C
  D
}

type Address {
  name      String
  addressL1 String
  addressL2 String
  city      String
  pincode   String
  state     String
  phone     String
}

type MatOptions {
  color Color
  width Float
}

enum CustomizationType {
  ImageWithMatAndGlazing
  ImageWithoutMatAndGlazing
  ImagePrintOnly
  ImageCanvasPrint
  EmptyForCanvas
  EmptyForPaper
  FramedMirror
}

type Customization {
  type       CustomizationType
  glazing    Glazing?
  width      Float
  height     Float
  mat        MatOptions[]
  mirror     Mirror?
  image      String?
  printing   Printing?
  backing    Backing?
  stretching Stretching?
  sides      Sides?
}

model CartItem {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  userId            String        @db.ObjectId
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  frameId           String?       @db.ObjectId
  frame             Frame?        @relation(fields: [frameId], references: [id], onDelete: Restrict)
  customization     Customization
  single_unit_price Float

  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, frameId])
  @@map("cart_items")
}

model Order {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Cost breakup
  packaging       Int
  delivery_charge Int
  discount        Int @default(0)

  // Items and Status
  order_items  OrderItem[]
  order_status OrderStatus @default(Received)

  // Payment and shipping
  transaction_status PaymentStatus @default(UnInitiated)
  paymentOrderId     String?
  shipping_address   Address
  delivery_date      DateTime
  transactions       Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("orders")
}

enum OrderStatus {
  Received
  Approved
  Processing
  Shipped
  Delivered
  Rejected
  Canceled
}

enum PaymentStatus {
  UnInitiated
  Pending
  Processing
  Success
  Failed
}

model OrderItem {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  frameId           String?       @db.ObjectId
  frame             Frame?        @relation(fields: [frameId], references: [id], onDelete: Restrict)
  customization     Customization
  quantity          Int
  single_unit_price Float
  orderId           String        @db.ObjectId
  order             Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([frameId])
  @@index([orderId])
  @@map("order_items")
}

model Transaction {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Payment Gateway fields
  paymentOrderId String
  status         PaymentStatus @default(Pending)
  paymentId      String?

  // Order and Amount
  orderId  String @db.ObjectId
  order    Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  amount   Float
  currency String

  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([orderId])
  @@index([paymentOrderId])
  @@map("transactions")
}

model Subscription {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  email            String             @unique
  status           SubscriptionStatus @default(Subscribed)
  unsubscribeToken String             @unique
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  @@index([status])
  @@map("subscriptions")
}

enum SubscriptionStatus {
  Subscribed
  Unsubscribed
}
