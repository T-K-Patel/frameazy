generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?       @default(now()) @map("email_verified")
  role          Role            @default(user)
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  CartItem  CartItem[]
  Order     Order[]

  @@map("users")
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

// Custom Models

model Frame {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String      @unique
  image       String
  borderSrc   String
  borderWidth Float
  unit_price  Float
  category    String
  color       String
  collection  String
  CartItem    CartItem[]
  OrderItem   OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Message {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  message   String
  name      String
  email     String
  userId    String?       @db.ObjectId
  status    MessageStatus @default(UnResolved)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model CartCustomization {
  id         String            @id @default(auto()) @map("_id") @db.ObjectId
  type       CustomizationType
  glazing    Glazing?
  width      Float
  height     Float
  mat        MatOptions[]
  mirror     Mirror?
  image      String?
  printing   Printing?
  backing    Backing?
  stretching Stretching?
  sides      Sides?
  // Relationship
  CartItem   CartItem?         @relation()
}

model CartItem {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  userId            String            @db.ObjectId
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  frameId           String?           @db.ObjectId
  frame             Frame?            @relation(fields: [frameId], references: [id], onDelete: Restrict)
  customizationId   String            @unique @db.ObjectId
  customization     CartCustomization @relation(fields: [customizationId], references: [id], onDelete: Cascade)
  single_unit_price Int
  quantity          Int               @default(1)
  // Time stamps
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@index([userId, frameId])
  @@map("cart_items")
}

model Order {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  userId           String       @db.ObjectId
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Cost breakup
  packaging        Int
  delivery_charge  Int
  discount         Int          @default(0)
  // Items and Status
  order_items      OrderItem[]
  order_status     OrderStatus  @default(Received)
  // Payment and shipping
  shipping_address Address
  delivery_date    DateTime?
  transaction      Transaction? @relation()
  // Time stamps
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  @@index([userId])
  @@map("orders")
}

model OrderCustomization {
  id         String            @id @default(auto()) @map("_id") @db.ObjectId
  type       CustomizationType
  glazing    Glazing?
  width      Float
  height     Float
  mat        MatOptions[]
  mirror     Mirror?
  image      String?
  printing   Printing?
  backing    Backing?
  stretching Stretching?
  sides      Sides?
  // Relationship
  OrderItem  OrderItem?        @relation()
}

model OrderItem {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  frameId           String?            @db.ObjectId
  frame             Frame?             @relation(fields: [frameId], references: [id], onDelete: Restrict)
  quantity          Int
  single_unit_price Int
  orderId           String             @db.ObjectId
  order             Order              @relation(fields: [orderId], references: [id], onDelete: Cascade)
  customizationId   String             @unique @db.ObjectId
  customization     OrderCustomization @relation(fields: [customizationId], references: [id], onDelete: Cascade)
  // Time stamps
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@index([frameId])
  @@index([orderId])
  @@map("order_items")
}

model Transaction {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  // Payment Gateway fields
  paymentOrderId String
  status         PaymentStatus @default(Created)
  paymentId      String?
  // Order and Amount
  orderId        String        @unique @db.ObjectId
  order          Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  amount         Int
  currency       String
  description    String?
  // Time stamps
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([paymentOrderId])
  @@map("transactions")
}

model Subscription {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  email            String             @unique
  status           SubscriptionStatus @default(Subscribed)
  unsubscribeToken String             @unique
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  @@index([status])
  @@map("subscriptions")
}

enum Role {
  user
  admin
}

enum Category {
  Frame_SingleMat
  Frame_DoubleMats
  PictureFrames
  Collages_SingleMat
  Collages_DoubleMats
  DiplomasFrames
}

enum Color {
  Aqua
  Barnwood
  Black
  BlondeBurl
  Brown
  Bronze
  Burgundy
  Charcoal
  ClearStain
  Cherry
  Gold
  Coffee
  Green
  Grey
  Honey
}

enum Collection {
  NaturalWoodCollection
  CloaseoutPicturesFrames
}

enum Mirror {
  Beveled
  NonBeveled
  Antique
  Plain
}

enum MessageStatus {
  UnResolved
  Resolved
}

enum Glazing {
  RegularGlass
  Acrylic
  UVGlass
  NonGlareGlass
  MuseumGlass
}

enum Printing {
  PaperGSM
  CanvasGSM
}

enum Backing {
  Cardboard
  Foamcore
  MDF
}

enum Stretching {
  StretcherBar
  GalleryWrap
  MuseumWrap
  FloatFrame
}

enum Sides {
  White
  Black
  Image
  Custom
  Mirror
}

type Address {
  name      String
  addressL1 String
  addressL2 String
  city      String
  pincode   String
  state     String
  phone     String
}

type MatOptions {
  color String
  width Float
}

enum CustomizationType {
  ImageWithMatAndGlazing
  ImageWithoutMatAndGlazing
  ImagePrintOnly
  ImageCanvasPrint
  EmptyForCanvas
  EmptyForPaper
  FramedMirror
}

enum OrderStatus {
  Received
  Approved
  Processing
  Shipped
  Delivered
  Rejected
  Canceled
}

enum PaymentStatus {
  Created
  Attempted
  Paid
}

enum SubscriptionStatus {
  Subscribed
  Unsubscribed
}
