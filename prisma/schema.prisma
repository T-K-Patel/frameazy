generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?       @map("email_verified")
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  CartItem      CartItem[]
  Order         Order[]
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Frame {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String      @unique
  price      Float
  image      String
  min_image  String
  category   Category
  color      Color
  collection Collection
  width      Int
  height     Int
  CartItem   CartItem[]
  OrderItem  OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

enum Category {
  A
  B
  C
  D
}

enum Color {
  A
  B
  C
  D
}

enum Collection {
  A
  B
  C
  D
}

enum Mirror {
  A
  B
  C
  D
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  message   String
  name      String
  email     String
  userId    String?  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Glazing {
  A
  B
  C
  D
}

// TODO: add fields for dimensions and other properties required
model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  frameId   String   @db.ObjectId
  frame     Frame    @relation(fields: [frameId], references: [id], onDelete: Restrict)
  image     String?
  mirror    Mirror?
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, frameId])
}

model Order {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  userId          String        @db.ObjectId
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  price           Int
  delivery_charge Int
  payment_status  PaymentStatus @default(UnInitiated)
  pay_order_id    String?
  pay_time        DateTime?
  order_status    OrderStatus   @default(Received)
  order_items     OrderItem[]
  transactions    Transaction[]
  name            String
  addressL1       String
  addressL2       String
  city            String
  pincode         String
  state           String
  phone           String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([userId])
}

enum OrderStatus {
  Received
  Approved
  Processing
  Shipped
  Delivered
}

enum PaymentStatus {
  UnInitiated
  Pending
  Success
  Failed
}

// TODO: add fields for dimensions and other properties required
model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  frameId   String   @db.ObjectId
  frame     Frame    @relation(fields: [frameId], references: [id], onDelete: Restrict)
  image     String
  quantity  Int
  orderId   String   @db.ObjectId
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([frameId])
  @@index([orderId])
}

model Transaction {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId
  paymentOrderId String
  paymentId      String
  orderId        String            @db.ObjectId
  order          Order             @relation(fields: [orderId], references: [id], onDelete: Cascade)
  amount         Float
  currency       String
  status         TransactionStatus
  description    String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  @@index([orderId])
  @@index([paymentOrderId])
}

enum TransactionStatus {
  Pending
  Success
  Failed
}

model Subscription {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  email            String             @unique
  status           SubscriptionStatus @default(Subscribed)
  unsubscribeToken String             @unique
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  @@index([status])
}

enum SubscriptionStatus {
  Subscribed
  Unsubscribed
}
